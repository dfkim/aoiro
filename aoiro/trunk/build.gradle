apply plugin: 'java'
apply plugin: 'eclipse'

version = '0.3.4'

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }

javadoc {
	options.charSet = defaultEncoding
	options.encoding = defaultEncoding
	options.memberLevel = JavadocMemberLevel.PUBLIC
	options.stylesheetFile = new File(rootDir, 'javadoc.css')
}

repositories {
    jcenter()
}

dependencies {
	compile fileTree(dir: 'lib',
		includes: ['**/*.jar'],
		excludes: ['**/*-sources.jar', '**/*-javadoc.jar'])
		
	compile 'org.freemarker:freemarker:2.3.28'
	compile 'org.apache.pdfbox:pdfbox:2.0.13'
	compile 'org.apache.pdfbox:fontbox:2.0.13'
	
	compile 'net.osdn.util.io:auto-detect-reader:0.1.1'
}

defaultTasks 'clean', 'build', 'exewrap'

jar {
	manifest {
		attributes "Specification-Version": "${version}"
		attributes "Main-Class" : "net.osdn.aoiro.cui.Main"
		attributes "Class-Path": configurations.runtime.collect { "lib/$it.name" }.join(' ')
	}
	from('src/main/java') {
		include '**/*.fxml'
		include '**/*.css'
	}
	exclude('img/*.psd', 'ico/**', 'psd/**')
}

task copyLibraries(type: Copy) {
	setGroup("build")
	setDescription("Copy dependency libraries.")
	from (sourceSets.main.runtimeClasspath) {
		include '*.jar'
	}
	into "${buildDir}/package/lib/"
}

task exewrap(type: Exec, dependsOn: 'jar') {
	setGroup("build")
	setDescription('Assembles the executable.')
	executable "${projectDir}/exewrap.exe"
	args "-A", "x64",
		"-t", "11",
		"-a", "-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UseSerialGC -XX:CICompilerCount=1 -Xverify:none -Xms128m",
		"-L", "lib",
		"-e", "NOLOG",
		"-j", "${jar.archiveFile.get()}",
		"-i", "src/main/resources/ico/app.ico",
		"-o", "${buildDir}/package/${jar.baseName}.exe",
		"-p", "aoiro",
		"-d", "aoiro",
		"-c", "(C) 2017-2019 HIRUKAWA Ryo",
		"-V", "${version}",
		"-v", "${version}"
}


task createJavaRuntime(type: Exec, dependsOn: ['jar', 'copyLibraries']) {
	setGroup("build")
	setDescription("Create Java Runtime.")
	workingDir "${buildDir}/package/"
	commandLine 'cmd', '/c', 'CreateJRE.bat', "${jar.archiveFile.get()}", "lib"
}

task initializeProjectFiles {
	doLast {
		if(file('src/main/java/Library.java').exists()) {
			file('lib').mkdir()
			delete "src/test"
			delete "src/main/java/Library.java"
		}
	}
}
tasks.eclipseClasspath.dependsOn(cleanEclipseClasspath)
tasks.eclipseClasspath.dependsOn(initializeProjectFiles)
tasks.cleanEclipseClasspath.mustRunAfter(initializeProjectFiles)
